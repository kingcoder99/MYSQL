Experiment 6: Cursor - Fetching Employee Details

Aim: Write a PL/SQL program that:
• Declares an explicit cursor to fetch employee ID, Name, and Salary from the EMPLOYEES
table.
• Uses a loop to fetch and display all records.
• Closes the cursor properly after execution.

Tools Used:
• PL/SQL: Oracle’s procedural language extension to SQL, used to write the program.
• Cursor: An explicit cursor is used to fetch data from the EMPLOYEES table.
• DBMS_OUTPUT.PUT_LINE: A procedure used to print output in Oracle SQL*Plus or PL/SQL Developer.

COde & Output:

SQL> CREATE TABLE EMPLOYEE1 ( 
  2   emp_id NUMBER PRIMARY KEY, 
  3   emp_name VARCHAR2(50) NOT NULL, 
  4   salary NUMBER(10,2), 
  5   department VARCHAR2(50), 
  6   hire_date DATE DEFAULT SYSDATE 
  7); 
Table created. 

SQL> INSERT INTO EMPLOYEE1 VALUES (101, 'Alice', 50000, 'HR', SYSDATE); 
1 row created. 

SQL> INSERT INTO EMPLOYEE1 VALUES (102, 'Bob', 45000, 'Finance', SYSDATE); 
1 row created. 

SQL> INSERT INTO EMPLOYEE1 VALUES (103, 'Charlie', 60000, 'IT', SYSDATE); 
1 row created. 

SQL> INSERT INTO EMPLOYEE1 VALUES (104, 'David', 55000, 'Marketing', SYSDATE); 
1 row created. 

SQL> INSERT INTO EMPLOYEE1 VALUES (105, 'Emma', 65000, 'IT', SYSDATE); 
1 row created. 

SQL> COMMIT; 
Commit complete.
SQL> SET SERVEROUTPUT ON; 

SQL> DECLARE 
  2   v_emp_id EMPLOYEE1.emp_id%TYPE; 
  3   v_emp_name EMPLOYEE1.emp_name%TYPE; 
  4   v_salary EMPLOYEE1.salary%TYPE; 
  5   
  6   CURSOR emp_cursor IS 
  7     SELECT emp_id, emp_name, salary FROM EMPLOYEE1; 
  8   
  9 BEGIN 
  10  OPEN emp_cursor; 
  11  LOOP 
  12    FETCH emp_cursor INTO v_emp_id, v_emp_name, v_salary; 
  13    EXIT WHEN emp_cursor%NOTFOUND; 
  14    DBMS_OUTPUT.PUT_LINE('Employee ID: ' || v_emp_id || 
  15                         ', Name: ' || v_emp_name || 
  16                         ', Salary: ' || v_salary); 
  17  END LOOP; 
  18  CLOSE emp_cursor; 
  19 END; 
  20 /


Learning Outcomes:
By the end of this program, learners will:
• Understand how to declare and use explicit cursors to fetch data from a database in
PL/SQL.
• Be able to loop through cursor results and process data one record at a time.


Conclusion:
This PL/SQL program demonstrates the concept of explicit cursors, which are an essential
tool in PL/SQL for retrieving and processing multiple rows of data from a query.