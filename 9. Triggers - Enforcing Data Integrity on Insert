Experiment 9: Triggers - Enforcing Data Integrity on Insert

Aim: Write a BEFORE INSERT trigger on the EMPLOYEES table that:
• Ensures that the salary is at least 5000.
• If a lower salary is inserted, automatically set it to 5000.
• Display a message when the trigger modifies the salary.
Tools Used:

• PL/SQL: Oracle's procedural language extension to SQL, used to write the trigger.
• DBMS_OUTPUT: A built-in package in Oracle used to display messages for debugging
and output purposes in SQL*Plus or PL/SQL Developer.

Code & Output:
SQL> CREATE TABLE EMPLOYEE4 ( 
  2   emp_id NUMBER PRIMARY KEY, 
  3   emp_name VARCHAR2(50) NOT NULL, 
  4   salary NUMBER(10,2), 
  5   department VARCHAR2(50), 
  6   hire_date DATE DEFAULT SYSDATE 
  7); 
Table created. 

SQL> INSERT INTO EMPLOYEE4 VALUES (101, 'Alice', 50000, 'HR', SYSDATE); 
1 row created. 
SQL> INSERT INTO EMPLOYEE4 VALUES (102, 'Bob', 45000, 'Finance', SYSDATE); 
1 row created. 
SQL> INSERT INTO EMPLOYEE4 VALUES (103, 'Charlie', 60000, 'IT', SYSDATE); 
1 row created. 
SQL> INSERT INTO EMPLOYEE4 VALUES (104, 'David', 55000, 'Marketing', SYSDATE); 
1 row created. 
SQL> INSERT INTO EMPLOYEE4 VALUES (105, 'Emma', 65000, 'IT', SYSDATE); 
1 row created. 
SQL> COMMIT; 
Commit complete.

EMP_ID  EMP_NAME  SALARY  DEPARTMENT  HIRE_DATE
------- -------- ------- ------------ ----------
101     Alice    50000   HR           16-MAR-25
102     Bob      45000   Finance       16-MAR-25
103     Charlie  60000   IT           16-MAR-25
104     David    55000   Marketing     16-MAR-25
105     Emma     65000   IT           16-MAR-25

SQL> CREATE OR REPLACE TRIGGER trg_before_insert_salary 
  2   BEFORE INSERT ON EMPLOYEE4 
  3   FOR EACH ROW 
  4 BEGIN 
  5   IF :NEW.salary < 5000 THEN 
  6     DBMS_OUTPUT.PUT_LINE('Salary too low! Updating to minimum salary (5000).'); 
  7     :NEW.salary := 5000;  -- Set salary to 5000 if it is less
  8   END IF; 
  9 END; 
 10 /
Trigger created.

SQL> INSERT INTO EMPLOYEE4 (emp_id, emp_name, salary, department) 
  2 VALUES (106, 'Frank', 3000, 'HR'); 
Salary too low! Updating to minimum salary (5000).
1 row created.

SQL> COMMIT;
Commit complete.

SQL> SELECT * FROM EMPLOYEE4 WHERE emp_id = 106;

EMP_ID  EMP_NAME  SALARY  DEPARTMENT  HIRE_DATE
------- --------  ------- ------------ -----------
106     Frank     5000    HR           16-MAR-25

Learning Outcomes:
• Students will be able to create triggers in PL/SQL that automatically enforce business
rules and data integrity constraints.
• Students will understand how to use BEFORE INSERT triggers to modify data before it
is inserted into a table.

Conclusion:
This PL/SQL trigger ensures that the salary of employees is always above a specified
minimum (5000). If a lower value is inserted, the trigger automatically updates the salary to
5000 and displays a message indicating the modification. This solution is an example of how
triggers can be used to enforce business rules and maintain data integrity in a database
automatically.