Experiment 8: Dynamic SQL - Preventing SQL Injection

Aim: Write a PL/SQL block that:
• Accepts a table name and column name as input.
• Uses Native Dynamic SQL (EXECUTE IMMEDIATE) to fetch data dynamically.
• Prevents SQL Injection by using bind variables instead of concatenation.

Tools Used:
• PL/SQL: Oracle’s procedural language extension to SQL, used for writing the block.
• EXECUTE IMMEDIATE: Native Dynamic SQL command to execute a dynamically
constructed SQL query.

Code &Output:

SQL> CREATE TABLE EMPLOYEE3 ( 
  2   emp_id NUMBER PRIMARY KEY, 
  3   emp_name VARCHAR2(50) NOT NULL, 
  4   salary NUMBER(10,2), 
  5   department VARCHAR2(50), 
  6   hire_date DATE DEFAULT SYSDATE 
  7); 
Table created. 

SQL> INSERT INTO EMPLOYEE3 VALUES (101, 'Alice', 50000, 'HR', SYSDATE); 
1 row created. 

SQL> INSERT INTO EMPLOYEE3 VALUES (102, 'Bob', 45000, 'Finance', SYSDATE); 
1 row created. 

SQL> INSERT INTO EMPLOYEE3 VALUES (103, 'Charlie', 60000, 'IT', SYSDATE); 
1 row created. 

SQL> INSERT INTO EMPLOYEE3 VALUES (104, 'David', 55000, 'Marketing', SYSDATE); 
1 row created. 

SQL> INSERT INTO EMPLOYEE3 VALUES (105, 'Emma', 65000, 'IT', SYSDATE); 
1 row created. 

SQL> COMMIT; 
Commit complete.

SQL> SELECT * FROM EMPLOYEE3; 
EMP_ID   EMP_NAME  SALARY  DEPARTMENT   HIRE_DATE
-------  --------  -------  -----------  ----------
101      Alice     50000    HR           16-MAR-25
102      Bob       45000    Finance       16-MAR-25
103      Charlie   60000    IT           16-MAR-25
104      David     55000    Marketing     16-MAR-25
105      Emma      65000    IT           16-MAR-25

SQL> SET SERVEROUTPUT ON; 
SQL> DECLARE 
  2   v_table_name VARCHAR2(50) := 'EMPLOYEE3'; 
  3   v_column_name VARCHAR2(50) := 'salary'; 
  4   v_value VARCHAR2(100); 
  5   v_sql_stmt VARCHAR2(2000); 
  6 BEGIN 
  7   v_sql_stmt := 'SELECT ' || DBMS_ASSERT.ENQUOTE_NAME(v_column_name) || 
  8                  ' FROM ' || DBMS_ASSERT.ENQUOTE_NAME(v_table_name) || 
  9                  ' WHERE ROWNUM = 1'; 
  10 
  11   EXECUTE IMMEDIATE v_sql_stmt INTO v_value; 
  12   DBMS_OUTPUT.PUT_LINE('Fetched Value: ' || v_value); 
  13 EXCEPTION 
  14 WHEN OTHERS THEN 
  15   DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM); 
  16 END; 
  17 /
Fetched Value: 50000


Learning Outcomes:
• Students will learn how to execute dynamic SQL queries using EXECUTE IMMEDIATE
in PL/SQL.
• Students will gain an understanding of how SQL injection occurs and how to prevent
it using bind variables

Conclusion:
This PL/SQL block demonstrates the importance of handling dynamic SQL securely to
prevent SQL injection attacks. By using bind variables, we ensure that user inputs are treated
as data and not executable SQL, making the application more secure.