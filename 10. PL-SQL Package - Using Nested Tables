Experiment 10: PL/SQL Package - Using Nested Tables

Aim: Create a PL/SQL package named emp_package that:
• Contains a nested table to store employee salaries.
• Has procedures to insert, update, and display the salaries.
• Uses TABLE OF NUMBER to define the nested table.
• Calls the package procedures in a PL/SQL block.

Tools Used:
• PL/SQL: Oracle’s procedural extension to SQL for writing the package and its body.
• Nested Tables: A PL/SQL collection type that can store multiple elements of the same
type.
• DBMS_OUTPUT: A built-in package for displaying output in PL/SQL, used here to
display the salary values.

Code & Output:

SQL> CREATE TABLE EMPLOYEES ( 
  2   emp_id NUMBER PRIMARY KEY, 
  3   emp_name VARCHAR2(50) NOT NULL, 
  4   salary NUMBER(10,2), 
  5   department VARCHAR2(50), 
  6   hire_date DATE DEFAULT SYSDATE 
  7); 
Table created.

SQL> INSERT INTO EMPLOYEES VALUES (101, 'Alice', 45000, 'HR', SYSDATE); 
1 row created.
SQL> INSERT INTO EMPLOYEES VALUES (102, 'Bob', 55000, 'Finance', SYSDATE); 
1 row created.
SQL> INSERT INTO EMPLOYEES VALUES (103, 'Charlie', 60000, 'IT', SYSDATE); 
1 row created.
SQL> INSERT INTO EMPLOYEES VALUES (104, 'David', 58000, 'Marketing', SYSDATE); 
1 row created.
SQL> INSERT INTO EMPLOYEES VALUES (105, 'Emma', 62000, 'IT', SYSDATE); 
1 row created.

SQL> COMMIT; 
Commit complete.

SQL> SELECT * FROM EMPLOYEE5;

EMP_ID  EMP_NAME   SALARY   DEPARTMENT   HIRE_DATE
------- ----------  -------  ------------  ----------
101     Alice      45000    HR            16-MAR-25
102     Bob        55000    Finance        16-MAR-25
103     Charlie    60000    IT            16-MAR-25
104     David      58000    Marketing      16-MAR-25
105     Emma       62000    IT            16-MAR-25

SQL> CREATE OR REPLACE PACKAGE emp_package AS 
  2   TYPE salary_table IS TABLE OF NUMBER; 
  3   emp_salaries salary_table := salary_table(); 
  4   PROCEDURE insert_salary(p_salary NUMBER); 
  5   PROCEDURE update_salary(p_index NUMBER, p_salary NUMBER); 
  6   PROCEDURE display_salaries; 
  7   PROCEDURE load_salaries; 
  8 END emp_package; 
  9 /
Package created.

SQL> CREATE OR REPLACE PACKAGE BODY emp_package AS 
  2   PROCEDURE insert_salary(p_salary NUMBER) IS 
  3   BEGIN 
  4     emp_salaries.EXTEND; 
  5     emp_salaries(emp_salaries.LAST) := p_salary; 
  6     DBMS_OUTPUT.PUT_LINE('Salary ' || p_salary || ' inserted.'); 
  7   END insert_salary; 

  8   PROCEDURE update_salary(p_index NUMBER, p_salary NUMBER) IS 
  9   BEGIN 
  10    IF p_index BETWEEN 1 AND emp_salaries.COUNT THEN 
  11      emp_salaries(p_index) := p_salary; 
  12    ELSE 
  13      DBMS_OUTPUT.PUT_LINE('Error: Invalid index!'); 
  14    END IF; 
  15  END update_salary; 

  16  PROCEDURE display_salaries IS 
  17  BEGIN 
  18    IF emp_salaries.COUNT = 0 THEN 
  19      DBMS_OUTPUT.PUT_LINE('No salaries available.'); 
  20    ELSE 
  21      FOR i IN 1..emp_salaries.COUNT LOOP 
  22        DBMS_OUTPUT.PUT_LINE('Salary [' || i || ']=' || emp_salaries(i)); 
  23      END LOOP; 
  24    END IF; 
  25  END display_salaries; 

  26  PROCEDURE load_salaries IS 
  27  BEGIN 
  28    emp_salaries.DELETE; 
  29    FOR rec IN (SELECT salary FROM EMPLOYEE5) LOOP 
  30      emp_salaries.EXTEND; 
  31      emp_salaries(emp_salaries.LAST) := rec.salary; 
  32    END LOOP; 
  33    DBMS_OUTPUT.PUT_LINE('Salaries loaded from EMPLOYEES table.'); 
  34  END load_salaries; 
  35 END emp_package; 
  36 /
Package body created.

SQL> SET SERVEROUTPUT ON; 
SQL> BEGIN 
2 
emp_package.load_salaries; 
3 
emp_package.insert_salary(70000); 
4 
emp_package.insert_salary(75000); 
5 
emp_package.update_salary(2, 58000); 
6 
7 
emp_package.display_salaries; 
8 
9 
END; 
10 /
Salaries loaded from EMPLOYEES table. 
Salary 70000 inserted. 
Salary 75000 inserted. 
Salary at position 2 updated to 58000. 
Salary [1] = 45000 
Salary [2] = 58000 
Salary [3] = 60000 
Salary [4] = 58000 
Salary [5] = 62000 
Salary [6] = 70000 
Salary [7] = 75000 
PL/SQL procedure successfully completed.

Learning Outcomes:
• Students will learn how to define and manipulate nested tables in PL/SQL.
• Students will gain experience in creating PL/SQL packages, organizing related
functionality into reusable code blocks.
• Students will develop the ability to perform CRUD operations (Create, Read, Update,
Delete) on collections like nested tables.

Conclusion:
This PL/SQL package demonstrates how to work with nested tables to store and manipulate
collections of data. By creating a package with procedures to insert, update, and display
employee salaries, students can see how powerful collections and modular programming
can be in PL/SQL. The package approach also promotes reusability and maintainability,
making it easier to manage and extend the code in future projects.
