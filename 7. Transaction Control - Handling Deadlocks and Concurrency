Experiment 7: Transaction Control - Handling Deadlocks and Concurrency

Aim: Write a PL/SQL block that:
• Begins a transaction.
• Updates the salary of an employee in the EMPLOYEES table.
• Introduces a delay (DBMS_LOCK.SLEEP) to simulate concurrency issues.
• Uses SAVEPOINT and ROLLBACK to handle deadlocks.

Tools Used:
• PL/SQL: Oracle’s procedural language extension to SQL, used to write the block.
• SAVEPOINT: A statement that allows you to set a point within a transaction to which
you can roll back.

Code & Output:
SQL> CREATE TABLE EMPLOYEE2 ( 
  2   emp_id NUMBER PRIMARY KEY, 
  3   emp_name VARCHAR2(50) NOT NULL, 
  4   salary NUMBER(10,2), 
  5   department VARCHAR2(50), 
  6   hire_date DATE DEFAULT SYSDATE 
  7); 
Table created. 

SQL> INSERT INTO EMPLOYEE2 VALUES (101, 'Alice', 50000, 'HR', SYSDATE); 
1 row created. 

SQL> INSERT INTO EMPLOYEE2 VALUES (102, 'Bob', 45000, 'Finance', SYSDATE); 
1 row created. 

SQL> INSERT INTO EMPLOYEE2 VALUES (103, 'Charlie', 60000, 'IT', SYSDATE); 
1 row created. 

SQL> INSERT INTO EMPLOYEE2 VALUES (104, 'David', 55000, 'Marketing', SYSDATE); 
1 row created. 

SQL> INSERT INTO EMPLOYEE2 VALUES (105, 'Emma', 65000, 'IT', SYSDATE); 
1 row created. 

SQL> COMMIT; 
Commit complete.

EMP_ID   EMP_NAME    SALARY  DEPARTMENT   HIRE_DATE
-------  ----------  -------  -----------  ----------
101      Alice       50000    HR           16-MAR-25
102      Bob         45000    Finance       16-MAR-25
103      Charlie     60000    IT           16-MAR-25
104      David       55000    Marketing     16-MAR-25
105      Emma        65000    IT           16-MAR-25

SQL> SET SERVEROUTPUT ON; 

SQL> DECLARE 
  2   v_emp_id NUMBER := 101; 
  3   v_new_salary NUMBER := 60000; 
  4 BEGIN 
  5   DBMS_OUTPUT.PUT_LINE('Transaction Started.'); 
  6   
  7   UPDATE EMPLOYEE2 
  8   SET salary = v_new_salary 
  9   WHERE emp_id = v_emp_id; 
  10  DBMS_OUTPUT.PUT_LINE('Salary updated for Employee ID: ' || v_emp_id); 
  11  SAVEPOINT before_delay; 
  12  DBMS_OUTPUT.PUT_LINE('Simulating concurrency issue with a delay...'); 
  13  DBMS_LOCK.SLEEP(10); -- 10-second delay 
  14   
  15  UPDATE EMPLOYEE2 
  16  SET salary = salary + 500 
  17  WHERE emp_id = v_emp_id; 
  18  DBMS_OUTPUT.PUT_LINE('Salary incremented for Employee ID: ' || v_emp_id); 
  19  COMMIT; 
  20  DBMS_OUTPUT.PUT_LINE('Transaction Committed Successfully.'); 
  21   
  22 EXCEPTION 
  23   WHEN OTHERS THEN 
  24     DBMS_OUTPUT.PUT_LINE('Error Occurred: ' || SQLERRM); 
  25     ROLLBACK TO before_delay; 
  26     DBMS_OUTPUT.PUT_LINE('Rolled back to savepoint.'); 
  27 END; 
  28 /


Learning Outcomes:
• Students will be able to write PL/SQL programs that handle transactions and ensure
proper data consistency in multi-user environments.
• Students will learn how to simulate concurrency issues and deadlocks in PL/SQL
using the DBMS_LOCK.SLEEP function.

Conclusion:
This PL/SQL block demonstrates how to handle transactions, deadlocks, and concurrency
issues using transaction control mechanisms like SAVEPOINT, ROLLBACK, and COMMIT. 